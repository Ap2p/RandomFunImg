import asyncio
import logging
import aiohttp
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from config import Config, load_config

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–≥–µ—Ä
logger = logging.getLogger(__name__)


# –§—É–Ω–∫—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    logging.basicConfig(
        level=logging.INFO,
        format='%(filename)s:%(lineno)d #%(levelname)-8s '
               '[%(asctime)s] - %(name)s - %(message)s')

    # –í—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞—á–∞–ª–µ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
    logger.info('Starting bot')

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é config
    config: Config = load_config()

    # –ò–Ω–∏—Ü–∏–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
    bot: Bot = Bot(token=config.tg_bot.token,
                   parse_mode='HTML')
    dp: Dispatcher = Dispatcher(bot)

    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–∞–∫–æ–ø–∏–≤—à–∏–µ—Å—è –∞–ø–¥–µ–π—Ç—ã –∏ –∑–∞–ø—É—Å–∫–∞–µ–º polling
    await bot.delete_webhook(drop_pending_updates=True)
    dp.register_message_handler(on_start, commands=['start'])
    dp.register_message_handler(on_cat_click, text='–ö–æ—Ç–∏–∫ üêà')
    dp.register_message_handler(on_dog_click, text='–ü–µ—Å–∏–∫ üê∂')
    dp.register_message_handler(on_fox_click, text='–õ–∏—Å–∞ ü¶ä')
    await dp.start_polling()


# API –¥–ª—è –∫–∞—Ä—Ç–∏–Ω–æ–∫
API_CATS_URL = 'https://api.thecatapi.com/v1/images/search'
API_DOGS_URL = 'https://random.dog/woof.json'
API_FOX_URL = 'https://randomfox.ca/floof/'
ERROR_TEXT = '–ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã–ª–∞ –±—ã—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫–∞ :('

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
keyboard = ReplyKeyboardMarkup([
    [KeyboardButton("–ö–æ—Ç–∏–∫ üêà"), KeyboardButton("–ü–µ—Å–∏–∫ üê∂"), KeyboardButton("–õ–∏—Å–∞ ü¶ä")],
], resize_keyboard=True)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ä—Ç–∏–Ω–∫–∏ —Å API –¥–ª—è –∫–æ—Ç–∏–∫–æ–≤
async def get_cat_image():
    try:
        async with aiohttp.ClientSession(connector=aiohttp.TCPConnector(verify_ssl=False)) as session:
            async with session.get(API_CATS_URL) as response:
                if response.status == 200:
                    data = await response.json()
                    if isinstance(data, list) and len(data) > 0 and 'url' in data[0]:
                        return data[0]['url']
                    logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ä—Ç–∏–Ω–∫–∏, –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: {data}")
    except aiohttp.ClientError as e:
        logging.error(f"Aiohttp client error: {e}")
    except Exception as e:
        logging.error(f"Unknown error: {e}")
    return None


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ä—Ç–∏–Ω–∫–∏ —Å API –¥–ª—è –ø–µ—Å–∏–∫–æ–≤
async def get_dog_image():
    try:
        async with aiohttp.ClientSession(connector=aiohttp.TCPConnector(verify_ssl=False)) as session:
            async with session.get(API_DOGS_URL) as response:
                if response.status == 200:
                    data = await response.json()
                    if 'url' in data:
                        return data['url']
                    logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ä—Ç–∏–Ω–∫–∏, –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: {data}")
    except aiohttp.ClientError as e:
        logging.error(f"Aiohttp client error: {e}")
    except Exception as e:
        logging.error(f"Unknown error: {e}")
    return None


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ä—Ç–∏–Ω–∫–∏ —Å API –¥–ª—è –ª–∏—Å
async def get_fox_image():
    try:
        async with aiohttp.ClientSession(connector=aiohttp.TCPConnector(verify_ssl=False)) as session:
            async with session.get(API_FOX_URL) as response:
                if response.status == 200:
                    data = await response.json()
                    if 'image' in data and 'link' in data:
                        return data['image']
                    logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ä—Ç–∏–Ω–∫–∏, –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: {data}")
    except aiohttp.ClientError as e:
        logging.error(f"Aiohttp client error: {e}")
    except Exception as e:
        logging.error(f"Unknown error: {e}")
    return None


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
async def on_start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É –∏–ª–∏ –≥–∏—Ñ–∫—É",
                         reply_markup=keyboard)


async def on_cat_click(message: types.Message):
    cat_link = await get_cat_image()
    if cat_link:
        await message.answer_photo(cat_link)
    else:
        await message.answer(ERROR_TEXT, reply_markup=keyboard)


async def on_dog_click(message: types.Message):
    dog_link = await get_dog_image()
    if dog_link:
        await message.answer_photo(dog_link)
    else:
        await message.answer(ERROR_TEXT, reply_markup=keyboard)


async def on_fox_click(message: types.Message):
    fox_link = await get_fox_image()
    if fox_link:
        await message.answer_photo(fox_link)
    else:
        await message.answer(ERROR_TEXT, reply_markup=keyboard)


if __name__ == "__main__":
    asyncio.run(main())
